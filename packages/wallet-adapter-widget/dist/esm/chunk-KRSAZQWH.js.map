{
  "version": 3,
  "sources": ["../../src/utils/transaction.ts"],
  "sourcesContent": ["import { serialize as borshSerialize } from \"borsh\";\nimport { fromBase58, fromBase64, keyFromString } from \"./utils.js\";\n\nfunction mapTransaction(jsonTransaction) {\n  return {\n    signerId: jsonTransaction.signerId,\n    publicKey: {\n      ed25519Key: {\n        data: keyFromString(jsonTransaction.publicKey),\n      },\n    },\n    nonce: BigInt(jsonTransaction.nonce),\n    receiverId: jsonTransaction.receiverId,\n    blockHash: fromBase58(jsonTransaction.blockHash),\n    actions: jsonTransaction.actions.map(mapActionForBorsh),\n  };\n}\n\nexport function serializeTransaction(jsonTransaction) {\n  const transaction = mapTransaction(jsonTransaction);\n  return borshSerialize(SCHEMA.Transaction, transaction);\n}\n\nexport function serializeSignedTransaction(jsonTransaction, signature) {\n  const signedTransaction = {\n    transaction: mapTransaction(jsonTransaction),\n    signature: {\n      ed25519Signature: {\n        data: fromBase58(signature),\n      },\n    },\n  };\n  return borshSerialize(SCHEMA.SignedTransaction, signedTransaction);\n}\n\nexport function mapActionForBorsh(action) {\n  switch (action.type) {\n    case \"CreateAccount\": {\n      return {\n        createAccount: {},\n      };\n    }\n    case \"DeployContract\": {\n      return {\n        deployContract: {\n          code: fromBase64(action.codeBase64),\n        },\n      };\n    }\n    case \"FunctionCall\": {\n      return {\n        functionCall: {\n          methodName: action.methodName,\n          args: action.argsBase64\n            ? fromBase64(action.argsBase64)\n            : Buffer.from(JSON.stringify(action.args)),\n          gas: BigInt(action.gas),\n          deposit: BigInt(action.deposit),\n        },\n      };\n    }\n    case \"Transfer\": {\n      return {\n        transfer: {\n          deposit: BigInt(action.deposit),\n        },\n      };\n    }\n    case \"Stake\": {\n      return {\n        stake: {\n          stake: BigInt(action.stake),\n          publicKey: {\n            ed25519Key: {\n              data: keyFromString(action.publicKey),\n            },\n          },\n        },\n      };\n    }\n    case \"AddKey\": {\n      return {\n        addKey: {\n          publicKey: {\n            ed25519Key: {\n              data: keyFromString(action.publicKey),\n            },\n          },\n          accessKey: {\n            nonce: BigInt(action.accessKey.nonce),\n            permission:\n              action.accessKey.permission === \"FullAccess\"\n                ? { fullAccess: {} }\n                : {\n                    functionCall: {\n                      allowance: action.accessKey.allowance\n                        ? BigInt(action.accessKey.allowance)\n                        : null,\n                      receiverId: action.accessKey.receiverId,\n                      methodNames: action.accessKey.methodNames,\n                    },\n                  },\n          },\n        },\n      };\n    }\n    case \"DeleteKey\": {\n      return {\n        deleteKey: {\n          publicKey: {\n            ed25519Key: {\n              data: keyFromString(action.publicKey),\n            },\n          },\n        },\n      };\n    }\n    case \"DeleteAccount\": {\n      return {\n        deleteAccount: {\n          beneficiaryId: action.beneficiaryId,\n        },\n      };\n    }\n    case \"SignedDelegate\": {\n      return {\n        signedDelegate: {\n          delegateAction: mapActionForBorsh(action.delegateAction),\n          signature: {\n            ed25519Signature: fromBase58(action.signature),\n          },\n        },\n      };\n    }\n    default: {\n      throw new Error(\"Not implemented action: \" + action.type);\n    }\n  }\n}\n\nexport const SCHEMA = new (class BorshSchema {\n  Ed25519Signature = {\n    struct: {\n      data: { array: { type: \"u8\", len: 64 } },\n    },\n  };\n  Secp256k1Signature = {\n    struct: {\n      data: { array: { type: \"u8\", len: 65 } },\n    },\n  };\n  Signature = {\n    enum: [\n      { struct: { ed25519Signature: this.Ed25519Signature } },\n      { struct: { secp256k1Signature: this.Secp256k1Signature } },\n    ],\n  };\n  Ed25519Data = {\n    struct: {\n      data: { array: { type: \"u8\", len: 32 } },\n    },\n  };\n  Secp256k1Data = {\n    struct: {\n      data: { array: { type: \"u8\", len: 64 } },\n    },\n  };\n  PublicKey = {\n    enum: [\n      { struct: { ed25519Key: this.Ed25519Data } },\n      { struct: { secp256k1Key: this.Secp256k1Data } },\n    ],\n  };\n  FunctionCallPermission = {\n    struct: {\n      allowance: { option: \"u128\" },\n      receiverId: \"string\",\n      methodNames: { array: { type: \"string\" } },\n    },\n  };\n  FullAccessPermission = {\n    struct: {},\n  };\n  AccessKeyPermission = {\n    enum: [\n      { struct: { functionCall: this.FunctionCallPermission } },\n      { struct: { fullAccess: this.FullAccessPermission } },\n    ],\n  };\n  AccessKey = {\n    struct: {\n      nonce: \"u64\",\n      permission: this.AccessKeyPermission,\n    },\n  };\n  CreateAccount = {\n    struct: {},\n  };\n  DeployContract = {\n    struct: {\n      code: { array: { type: \"u8\" } },\n    },\n  };\n  FunctionCall = {\n    struct: {\n      methodName: \"string\",\n      args: { array: { type: \"u8\" } },\n      gas: \"u64\",\n      deposit: \"u128\",\n    },\n  };\n  Transfer = {\n    struct: {\n      deposit: \"u128\",\n    },\n  };\n  Stake = {\n    struct: {\n      stake: \"u128\",\n      publicKey: this.PublicKey,\n    },\n  };\n  AddKey = {\n    struct: {\n      publicKey: this.PublicKey,\n      accessKey: this.AccessKey,\n    },\n  };\n  DeleteKey = {\n    struct: {\n      publicKey: this.PublicKey,\n    },\n  };\n  DeleteAccount = {\n    struct: {\n      beneficiaryId: \"string\",\n    },\n  };\n  ClassicAction = {\n    enum: [\n      { struct: { createAccount: this.CreateAccount } },\n      { struct: { deployContract: this.DeployContract } },\n      { struct: { functionCall: this.FunctionCall } },\n      { struct: { transfer: this.Transfer } },\n      { struct: { stake: this.Stake } },\n      { struct: { addKey: this.AddKey } },\n      { struct: { deleteKey: this.DeleteKey } },\n      { struct: { deleteAccount: this.DeleteAccount } },\n    ],\n  };\n  DelegateAction = {\n    struct: {\n      senderId: \"string\",\n      receiverId: \"string\",\n      actions: { array: { type: this.ClassicAction } },\n      nonce: \"u64\",\n      maxBlockHeight: \"u64\",\n      publicKey: this.PublicKey,\n    },\n  };\n  SignedDelegate = {\n    struct: {\n      delegateAction: this.DelegateAction,\n      signature: this.Signature,\n    },\n  };\n  Action = {\n    enum: [\n      { struct: { createAccount: this.CreateAccount } },\n      { struct: { deployContract: this.DeployContract } },\n      { struct: { functionCall: this.FunctionCall } },\n      { struct: { transfer: this.Transfer } },\n      { struct: { stake: this.Stake } },\n      { struct: { addKey: this.AddKey } },\n      { struct: { deleteKey: this.DeleteKey } },\n      { struct: { deleteAccount: this.DeleteAccount } },\n      { struct: { signedDelegate: this.SignedDelegate } },\n    ],\n  };\n  Transaction = {\n    struct: {\n      signerId: \"string\",\n      publicKey: this.PublicKey,\n      nonce: \"u64\",\n      receiverId: \"string\",\n      blockHash: { array: { type: \"u8\", len: 32 } },\n      actions: { array: { type: this.Action } },\n    },\n  };\n  SignedTransaction = {\n    struct: {\n      transaction: this.Transaction,\n      signature: this.Signature,\n    },\n  };\n})();\n"],
  "mappings": "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",
  "names": []
}
