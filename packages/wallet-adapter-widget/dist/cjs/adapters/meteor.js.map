{
  "version": 3,
  "sources": ["../../../src/adapters/meteor.ts", "../../../src/utils/utils.ts", "../../../src/utils/actionToWalletSelector.ts"],
  "sourcesContent": ["import { connect, KeyPair } from \"meer-api-js\";\n\nimport {EMeteorWalletSignInType, MeteorWallet} from \"@fastnear/meteorwallet-sdk\";\nimport { mapActionForWalletSelector } from \"../utils/actionToWalletSelector\";\nimport { PublicKey } from \"@near-js/crypto\";\nimport { keyStores } from \"meer-api-js\";\n\nasync function createMeteorWalletInstance({ networkId = \"mainnet\" }) {\n  const keyStore = new keyStores.BrowserLocalStorageKeyStore(\n    window.localStorage,\n    \"_meteor_wallet\"\n  );\n\n  const near = await connect({\n    keyStore,\n    networkId,\n    nodeUrl:\n      networkId === \"mainnet\"\n        ? \"https://rpc.mainnet.near.org\"\n        : \"https://rpc.testnet.near.org\",\n  });\n\n  return new MeteorWallet({ near, appKeyPrefix: \"near_app\" });\n}\n\nexport function createMeteorAdapter() {\n  return {\n    async signIn({ networkId, contractId, publicKey }) {\n      publicKey = PublicKey.from(publicKey);\n      console.log('aloha publicKey', publicKey)\n      const keyPair = KeyPair.fromString(publicKey.toString());\n      console.log('aloha keyPair', keyPair)\n      const wallet = await createMeteorWalletInstance({ networkId });\n\n      const {\n        success,\n        payload: { accountId },\n      } = await wallet.requestSignIn({\n        contract_id: contractId,\n        type: EMeteorWalletSignInType.ALL_METHODS,\n        keyPair,\n      });\n\n      if (!success) {\n        throw new Error(\"Meteor Wallet sign in failed\");\n      }\n\n      return {\n        state: {\n          accountId,\n          publicKey: publicKey.toString(),\n          networkId,\n        },\n      };\n    },\n\n    async sendTransactions({ state, transactions }) {\n      if (!state?.accountId) {\n        throw new Error(\"Not signed in\");\n      }\n\n      const wallet = await createMeteorWalletInstance({\n        networkId: state?.networkId,\n      });\n      try {\n        const response = await wallet.requestSignTransactions({\n          transactions: transactions.map(\n            ({ signerId, receiverId, actions }) => {\n              if (signerId && signerId !== state.accountId) {\n                throw new Error(\"Invalid signer\");\n              }\n              return {\n                signerId: state.accountId,\n                receiverId,\n                actions: actions.map(mapActionForWalletSelector),\n              };\n            }\n          ),\n        });\n\n        return { outcomes: response };\n      } catch (error) {\n        if (\n          error.message === \"User cancelled the action\" ||\n          error.message ===\n            \"User closed the window before completing the action\"\n        ) {\n          return { rejected: true };\n        }\n        console.log(error);\n        throw new Error(error);\n      }\n    },\n  };\n}\n", "import {\n  binary_to_base58 as toBase58,\n  base58_to_binary as fromBase58,\n} from \"base58-js\";\n\nimport { toByteArray, fromByteArray } from 'base64-js';\n\nexport { toBase58, fromBase58 };\n\nexport const keyFromString = (key) =>\n  fromBase58(\n    key.includes(\":\")\n      ? (() => {\n          const [curve, keyPart] = key.split(\":\");\n          if (curve !== \"ed25519\") {\n            throw new Error(`Unsupported curve: ${curve}`);\n          }\n          return keyPart;\n        })()\n      : key\n  );\n\nexport const keyToString = (key) => `ed25519:${toBase58(key)}`;\n\nexport function toBase64(data: Uint8Array): string {\n  return fromByteArray(data);\n}\n\nexport function fromBase64(base64: string): Uint8Array {\n  return toByteArray(base64);\n}\n", "import { fromBase64 } from \"./utils.js\";\n\nexport const mapActionForWalletSelector = action => {\n  const type = action.type;\n  switch (type) {\n    case \"CreateAccount\":\n      return action;\n    case \"DeployContract\": {\n      return { type, params: { code: fromBase64(action.codeBase64) } };\n    }\n    case \"FunctionCall\": {\n      return {\n        type,\n        params: {\n          methodName: action.methodName,\n          args: action.argsBase64 ? fromBase64(action.argsBase64) : action.args,\n          gas: action.gas,\n          deposit: action.deposit,\n        },\n      };\n    }\n    case \"Transfer\": {\n      return { type, params: { deposit: action.deposit } };\n    }\n    case \"Stake\": {\n      return {\n        type,\n        params: { stake: action.stake, publicKey: action.publicKey },\n      };\n    }\n    case \"AddKey\": {\n      return {\n        type,\n        params: {\n          publicKey: action.publicKey,\n          accessKey: action.accessKey,\n        },\n      };\n    }\n    case \"DeleteKey\": {\n      return { type, params: { publicKey: action.publicKey } };\n    }\n    case \"DeleteAccount\": {\n      return { type, params: { beneficiaryId: action.beneficiaryId } };\n    }\n    default:\n      throw new Error(\"Invalid action type\");\n  }\n};\n"],
  "mappings": "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",
  "names": ["import_meer_api_js"]
}
