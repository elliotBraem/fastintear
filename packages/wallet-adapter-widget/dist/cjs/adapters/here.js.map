{
  "version": 3,
  "sources": ["../../../src/adapters/here.ts", "../../../src/utils/utils.ts", "../../../src/utils/actionToWalletSelector.ts"],
  "sourcesContent": ["import { HereWallet } from \"@here-wallet/core\";\nimport { mapActionForWalletSelector } from \"../utils/actionToWalletSelector\";\n\nexport function createHereAdapter(): any {\n  return {\n    async signIn({ networkId, contractId, publicKey }) {\n      const here = await HereWallet.connect({ networkId });\n      const accountId = await here.signIn({ contractId });\n      const key = await here.authStorage.getKey(networkId, accountId);\n\n      return {\n        state: {\n          accountId,\n          privateKey: key.toString(),\n          networkId,\n        },\n      };\n    },\n\n    async sendTransactions({ state, transactions }) {\n      if (!state?.accountId) {\n        throw new Error(\"Not signed in\");\n      }\n\n      const wallet = await HereWallet.connect({ networkId: state?.networkId });\n\n      try {\n        const response = await wallet.signAndSendTransactions({\n          transactions: transactions.map(\n            ({ signerId, receiverId, actions }) => {\n              if (signerId && signerId !== state.accountId) {\n                throw new Error(\"Invalid signer\");\n              }\n              return {\n                signerId: state.accountId,\n                receiverId,\n                actions: actions.map(mapActionForWalletSelector),\n              };\n            }\n          ),\n        });\n\n        return { outcomes: response };\n      } catch (error) {\n        console.log(error);\n        // if (\n        //   error.message === \"User cancelled the action\" ||\n        //   error.message ===\n        //     \"User closed the window before completing the action\"\n        // ) {\n        //   return { rejected: true };\n        // }\n        throw new Error(error);\n      }\n    },\n  };\n}\n", "import {\n  binary_to_base58 as toBase58,\n  base58_to_binary as fromBase58,\n} from \"base58-js\";\n\nimport { toByteArray, fromByteArray } from 'base64-js';\n\nexport { toBase58, fromBase58 };\n\nexport const keyFromString = (key) =>\n  fromBase58(\n    key.includes(\":\")\n      ? (() => {\n          const [curve, keyPart] = key.split(\":\");\n          if (curve !== \"ed25519\") {\n            throw new Error(`Unsupported curve: ${curve}`);\n          }\n          return keyPart;\n        })()\n      : key\n  );\n\nexport const keyToString = (key) => `ed25519:${toBase58(key)}`;\n\nexport function toBase64(data: Uint8Array): string {\n  return fromByteArray(data);\n}\n\nexport function fromBase64(base64: string): Uint8Array {\n  return toByteArray(base64);\n}\n", "import { fromBase64 } from \"./utils.js\";\n\nexport const mapActionForWalletSelector = action => {\n  const type = action.type;\n  switch (type) {\n    case \"CreateAccount\":\n      return action;\n    case \"DeployContract\": {\n      return { type, params: { code: fromBase64(action.codeBase64) } };\n    }\n    case \"FunctionCall\": {\n      return {\n        type,\n        params: {\n          methodName: action.methodName,\n          args: action.argsBase64 ? fromBase64(action.argsBase64) : action.args,\n          gas: action.gas,\n          deposit: action.deposit,\n        },\n      };\n    }\n    case \"Transfer\": {\n      return { type, params: { deposit: action.deposit } };\n    }\n    case \"Stake\": {\n      return {\n        type,\n        params: { stake: action.stake, publicKey: action.publicKey },\n      };\n    }\n    case \"AddKey\": {\n      return {\n        type,\n        params: {\n          publicKey: action.publicKey,\n          accessKey: action.accessKey,\n        },\n      };\n    }\n    case \"DeleteKey\": {\n      return { type, params: { publicKey: action.publicKey } };\n    }\n    case \"DeleteAccount\": {\n      return { type, params: { beneficiaryId: action.beneficiaryId } };\n    }\n    default:\n      throw new Error(\"Invalid action type\");\n  }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA2B;;;ACA3B,uBAGO;AAEP,uBAA2C;AAuBpC,SAAS,WAAW,QAA4B;AACrD,aAAO,8BAAY,MAAM;AAC3B;;;AC5BO,IAAM,6BAA6B,YAAU;AAClD,QAAM,OAAO,OAAO;AACpB,UAAQ,MAAM;AAAA,IACZ,KAAK;AACH,aAAO;AAAA,IACT,KAAK,kBAAkB;AACrB,aAAO,EAAE,MAAM,QAAQ,EAAE,MAAM,WAAW,OAAO,UAAU,EAAE,EAAE;AAAA,IACjE;AAAA,IACA,KAAK,gBAAgB;AACnB,aAAO;AAAA,QACL;AAAA,QACA,QAAQ;AAAA,UACN,YAAY,OAAO;AAAA,UACnB,MAAM,OAAO,aAAa,WAAW,OAAO,UAAU,IAAI,OAAO;AAAA,UACjE,KAAK,OAAO;AAAA,UACZ,SAAS,OAAO;AAAA,QAClB;AAAA,MACF;AAAA,IACF;AAAA,IACA,KAAK,YAAY;AACf,aAAO,EAAE,MAAM,QAAQ,EAAE,SAAS,OAAO,QAAQ,EAAE;AAAA,IACrD;AAAA,IACA,KAAK,SAAS;AACZ,aAAO;AAAA,QACL;AAAA,QACA,QAAQ,EAAE,OAAO,OAAO,OAAO,WAAW,OAAO,UAAU;AAAA,MAC7D;AAAA,IACF;AAAA,IACA,KAAK,UAAU;AACb,aAAO;AAAA,QACL;AAAA,QACA,QAAQ;AAAA,UACN,WAAW,OAAO;AAAA,UAClB,WAAW,OAAO;AAAA,QACpB;AAAA,MACF;AAAA,IACF;AAAA,IACA,KAAK,aAAa;AAChB,aAAO,EAAE,MAAM,QAAQ,EAAE,WAAW,OAAO,UAAU,EAAE;AAAA,IACzD;AAAA,IACA,KAAK,iBAAiB;AACpB,aAAO,EAAE,MAAM,QAAQ,EAAE,eAAe,OAAO,cAAc,EAAE;AAAA,IACjE;AAAA,IACA;AACE,YAAM,IAAI,MAAM,qBAAqB;AAAA,EACzC;AACF;;;AF7CO,SAAS,oBAAyB;AACvC,SAAO;AAAA,IACL,MAAM,OAAO,EAAE,WAAW,YAAY,UAAU,GAAG;AACjD,YAAM,OAAO,MAAM,uBAAW,QAAQ,EAAE,UAAU,CAAC;AACnD,YAAM,YAAY,MAAM,KAAK,OAAO,EAAE,WAAW,CAAC;AAClD,YAAM,MAAM,MAAM,KAAK,YAAY,OAAO,WAAW,SAAS;AAE9D,aAAO;AAAA,QACL,OAAO;AAAA,UACL;AAAA,UACA,YAAY,IAAI,SAAS;AAAA,UACzB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IAEA,MAAM,iBAAiB,EAAE,OAAO,aAAa,GAAG;AAC9C,UAAI,CAAC,OAAO,WAAW;AACrB,cAAM,IAAI,MAAM,eAAe;AAAA,MACjC;AAEA,YAAM,SAAS,MAAM,uBAAW,QAAQ,EAAE,WAAW,OAAO,UAAU,CAAC;AAEvE,UAAI;AACF,cAAM,WAAW,MAAM,OAAO,wBAAwB;AAAA,UACpD,cAAc,aAAa;AAAA,YACzB,CAAC,EAAE,UAAU,YAAY,QAAQ,MAAM;AACrC,kBAAI,YAAY,aAAa,MAAM,WAAW;AAC5C,sBAAM,IAAI,MAAM,gBAAgB;AAAA,cAClC;AACA,qBAAO;AAAA,gBACL,UAAU,MAAM;AAAA,gBAChB;AAAA,gBACA,SAAS,QAAQ,IAAI,0BAA0B;AAAA,cACjD;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAC;AAED,eAAO,EAAE,UAAU,SAAS;AAAA,MAC9B,SAAS,OAAO;AACd,gBAAQ,IAAI,KAAK;AAQjB,cAAM,IAAI,MAAM,KAAK;AAAA,MACvB;AAAA,IACF;AAAA,EACF;AACF;",
  "names": []
}
