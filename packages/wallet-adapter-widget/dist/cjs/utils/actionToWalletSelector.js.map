{
  "version": 3,
  "sources": ["../../../src/utils/actionToWalletSelector.ts", "../../../src/utils/utils.ts"],
  "sourcesContent": ["import { fromBase64 } from \"./utils.js\";\n\nexport const mapActionForWalletSelector = action => {\n  const type = action.type;\n  switch (type) {\n    case \"CreateAccount\":\n      return action;\n    case \"DeployContract\": {\n      return { type, params: { code: fromBase64(action.codeBase64) } };\n    }\n    case \"FunctionCall\": {\n      return {\n        type,\n        params: {\n          methodName: action.methodName,\n          args: action.argsBase64 ? fromBase64(action.argsBase64) : action.args,\n          gas: action.gas,\n          deposit: action.deposit,\n        },\n      };\n    }\n    case \"Transfer\": {\n      return { type, params: { deposit: action.deposit } };\n    }\n    case \"Stake\": {\n      return {\n        type,\n        params: { stake: action.stake, publicKey: action.publicKey },\n      };\n    }\n    case \"AddKey\": {\n      return {\n        type,\n        params: {\n          publicKey: action.publicKey,\n          accessKey: action.accessKey,\n        },\n      };\n    }\n    case \"DeleteKey\": {\n      return { type, params: { publicKey: action.publicKey } };\n    }\n    case \"DeleteAccount\": {\n      return { type, params: { beneficiaryId: action.beneficiaryId } };\n    }\n    default:\n      throw new Error(\"Invalid action type\");\n  }\n};\n", "import {\n  binary_to_base58 as toBase58,\n  base58_to_binary as fromBase58,\n} from \"base58-js\";\n\nimport { toByteArray, fromByteArray } from 'base64-js';\n\nexport { toBase58, fromBase58 };\n\nexport const keyFromString = (key) =>\n  fromBase58(\n    key.includes(\":\")\n      ? (() => {\n          const [curve, keyPart] = key.split(\":\");\n          if (curve !== \"ed25519\") {\n            throw new Error(`Unsupported curve: ${curve}`);\n          }\n          return keyPart;\n        })()\n      : key\n  );\n\nexport const keyToString = (key) => `ed25519:${toBase58(key)}`;\n\nexport function toBase64(data: Uint8Array): string {\n  return fromByteArray(data);\n}\n\nexport function fromBase64(base64: string): Uint8Array {\n  return toByteArray(base64);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,uBAGO;AAEP,uBAA2C;AAuBpC,SAAS,WAAW,QAA4B;AACrD,aAAO,8BAAY,MAAM;AAC3B;;;AD5BO,IAAM,6BAA6B,YAAU;AAClD,QAAM,OAAO,OAAO;AACpB,UAAQ,MAAM;AAAA,IACZ,KAAK;AACH,aAAO;AAAA,IACT,KAAK,kBAAkB;AACrB,aAAO,EAAE,MAAM,QAAQ,EAAE,MAAM,WAAW,OAAO,UAAU,EAAE,EAAE;AAAA,IACjE;AAAA,IACA,KAAK,gBAAgB;AACnB,aAAO;AAAA,QACL;AAAA,QACA,QAAQ;AAAA,UACN,YAAY,OAAO;AAAA,UACnB,MAAM,OAAO,aAAa,WAAW,OAAO,UAAU,IAAI,OAAO;AAAA,UACjE,KAAK,OAAO;AAAA,UACZ,SAAS,OAAO;AAAA,QAClB;AAAA,MACF;AAAA,IACF;AAAA,IACA,KAAK,YAAY;AACf,aAAO,EAAE,MAAM,QAAQ,EAAE,SAAS,OAAO,QAAQ,EAAE;AAAA,IACrD;AAAA,IACA,KAAK,SAAS;AACZ,aAAO;AAAA,QACL;AAAA,QACA,QAAQ,EAAE,OAAO,OAAO,OAAO,WAAW,OAAO,UAAU;AAAA,MAC7D;AAAA,IACF;AAAA,IACA,KAAK,UAAU;AACb,aAAO;AAAA,QACL;AAAA,QACA,QAAQ;AAAA,UACN,WAAW,OAAO;AAAA,UAClB,WAAW,OAAO;AAAA,QACpB;AAAA,MACF;AAAA,IACF;AAAA,IACA,KAAK,aAAa;AAChB,aAAO,EAAE,MAAM,QAAQ,EAAE,WAAW,OAAO,UAAU,EAAE;AAAA,IACzD;AAAA,IACA,KAAK,iBAAiB;AACpB,aAAO,EAAE,MAAM,QAAQ,EAAE,eAAe,OAAO,cAAc,EAAE;AAAA,IACjE;AAAA,IACA;AACE,YAAM,IAAI,MAAM,qBAAqB;AAAA,EACzC;AACF;",
  "names": []
}
