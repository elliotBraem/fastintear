{"version":3,"sources":["../../src/index.ts"],"sourcesContent":["export const getBorshSchema = (() => {\n  class BorshSchema {\n    Ed25519Signature = {\n      struct: {\n        data: { array: { type: \"u8\", len: 64 } },\n      },\n    };\n    Secp256k1Signature = {\n      struct: {\n        data: { array: { type: \"u8\", len: 65 } },\n      },\n    };\n    Signature = {\n      enum: [\n        { struct: { ed25519Signature: this.Ed25519Signature } },\n        { struct: { secp256k1Signature: this.Secp256k1Signature } },\n      ],\n    };\n    Ed25519Data = {\n      struct: {\n        data: { array: { type: \"u8\", len: 32 } },\n      },\n    };\n    Secp256k1Data = {\n      struct: {\n        data: { array: { type: \"u8\", len: 64 } },\n      },\n    };\n    PublicKey = {\n      enum: [\n        { struct: { ed25519Key: this.Ed25519Data } },\n        { struct: { secp256k1Key: this.Secp256k1Data } },\n      ],\n    };\n    FunctionCallPermission = {\n      struct: {\n        allowance: { option: \"u128\" },\n        receiverId: \"string\",\n        methodNames: { array: { type: \"string\" } },\n      },\n    };\n    FullAccessPermission = {\n      struct: {},\n    };\n    AccessKeyPermission = {\n      enum: [\n        { struct: { functionCall: this.FunctionCallPermission } },\n        { struct: { fullAccess: this.FullAccessPermission } },\n      ],\n    };\n    AccessKey = {\n      struct: {\n        nonce: \"u64\",\n        permission: this.AccessKeyPermission,\n      },\n    };\n    CreateAccount = {\n      struct: {},\n    };\n    DeployContract = {\n      struct: {\n        code: { array: { type: \"u8\" } },\n      },\n    };\n    FunctionCall = {\n      struct: {\n        methodName: \"string\",\n        args: { array: { type: \"u8\" } },\n        gas: \"u64\",\n        deposit: \"u128\",\n      },\n    };\n    Transfer = {\n      struct: {\n        deposit: \"u128\",\n      },\n    };\n    Stake = {\n      struct: {\n        stake: \"u128\",\n        publicKey: this.PublicKey,\n      },\n    };\n    AddKey = {\n      struct: {\n        publicKey: this.PublicKey,\n        accessKey: this.AccessKey,\n      },\n    };\n    DeleteKey = {\n      struct: {\n        publicKey: this.PublicKey,\n      },\n    };\n    DeleteAccount = {\n      struct: {\n        beneficiaryId: \"string\",\n      },\n    };\n    ClassicAction = {\n      enum: [\n        { struct: { createAccount: this.CreateAccount } },\n        { struct: { deployContract: this.DeployContract } },\n        { struct: { functionCall: this.FunctionCall } },\n        { struct: { transfer: this.Transfer } },\n        { struct: { stake: this.Stake } },\n        { struct: { addKey: this.AddKey } },\n        { struct: { deleteKey: this.DeleteKey } },\n        { struct: { deleteAccount: this.DeleteAccount } },\n      ],\n    };\n    DelegateAction = {\n      struct: {\n        senderId: \"string\",\n        receiverId: \"string\",\n        actions: { array: { type: this.ClassicAction } },\n        nonce: \"u64\",\n        maxBlockHeight: \"u64\",\n        publicKey: this.PublicKey,\n      },\n    };\n    SignedDelegate = {\n      struct: {\n        delegateAction: this.DelegateAction,\n        signature: this.Signature,\n      },\n    };\n    Action = {\n      enum: [\n        { struct: { createAccount: this.CreateAccount } },\n        { struct: { deployContract: this.DeployContract } },\n        { struct: { functionCall: this.FunctionCall } },\n        { struct: { transfer: this.Transfer } },\n        { struct: { stake: this.Stake } },\n        { struct: { addKey: this.AddKey } },\n        { struct: { deleteKey: this.DeleteKey } },\n        { struct: { deleteAccount: this.DeleteAccount } },\n        { struct: { signedDelegate: this.SignedDelegate } },\n      ],\n    };\n    Transaction = {\n      struct: {\n        signerId: \"string\",\n        publicKey: this.PublicKey,\n        nonce: \"u64\",\n        receiverId: \"string\",\n        blockHash: { array: { type: \"u8\", len: 32 } },\n        actions: { array: { type: this.Action } },\n      },\n    };\n    SignedTransaction = {\n      struct: {\n        transaction: this.Transaction,\n        signature: this.Signature,\n      },\n    };\n  }\n  return new BorshSchema();\n})();\n"],"mappings":"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","names":[]}