{"version":3,"sources":["../../src/index.ts"],"sourcesContent":["export const getBorshSchema = (() => {\n  class BorshSchema {\n    Ed25519Signature = {\n      struct: {\n        data: { array: { type: \"u8\", len: 64 } },\n      },\n    };\n    Secp256k1Signature = {\n      struct: {\n        data: { array: { type: \"u8\", len: 65 } },\n      },\n    };\n    Signature = {\n      enum: [\n        { struct: { ed25519Signature: this.Ed25519Signature } },\n        { struct: { secp256k1Signature: this.Secp256k1Signature } },\n      ],\n    };\n    Ed25519Data = {\n      struct: {\n        data: { array: { type: \"u8\", len: 32 } },\n      },\n    };\n    Secp256k1Data = {\n      struct: {\n        data: { array: { type: \"u8\", len: 64 } },\n      },\n    };\n    PublicKey = {\n      enum: [\n        { struct: { ed25519Key: this.Ed25519Data } },\n        { struct: { secp256k1Key: this.Secp256k1Data } },\n      ],\n    };\n    FunctionCallPermission = {\n      struct: {\n        allowance: { option: \"u128\" },\n        receiverId: \"string\",\n        methodNames: { array: { type: \"string\" } },\n      },\n    };\n    FullAccessPermission = {\n      struct: {},\n    };\n    AccessKeyPermission = {\n      enum: [\n        { struct: { functionCall: this.FunctionCallPermission } },\n        { struct: { fullAccess: this.FullAccessPermission } },\n      ],\n    };\n    AccessKey = {\n      struct: {\n        nonce: \"u64\",\n        permission: this.AccessKeyPermission,\n      },\n    };\n    CreateAccount = {\n      struct: {},\n    };\n    DeployContract = {\n      struct: {\n        code: { array: { type: \"u8\" } },\n      },\n    };\n    FunctionCall = {\n      struct: {\n        methodName: \"string\",\n        args: { array: { type: \"u8\" } },\n        gas: \"u64\",\n        deposit: \"u128\",\n      },\n    };\n    Transfer = {\n      struct: {\n        deposit: \"u128\",\n      },\n    };\n    Stake = {\n      struct: {\n        stake: \"u128\",\n        publicKey: this.PublicKey,\n      },\n    };\n    AddKey = {\n      struct: {\n        publicKey: this.PublicKey,\n        accessKey: this.AccessKey,\n      },\n    };\n    DeleteKey = {\n      struct: {\n        publicKey: this.PublicKey,\n      },\n    };\n    DeleteAccount = {\n      struct: {\n        beneficiaryId: \"string\",\n      },\n    };\n    ClassicAction = {\n      enum: [\n        { struct: { createAccount: this.CreateAccount } },\n        { struct: { deployContract: this.DeployContract } },\n        { struct: { functionCall: this.FunctionCall } },\n        { struct: { transfer: this.Transfer } },\n        { struct: { stake: this.Stake } },\n        { struct: { addKey: this.AddKey } },\n        { struct: { deleteKey: this.DeleteKey } },\n        { struct: { deleteAccount: this.DeleteAccount } },\n      ],\n    };\n    DelegateAction = {\n      struct: {\n        senderId: \"string\",\n        receiverId: \"string\",\n        actions: { array: { type: this.ClassicAction } },\n        nonce: \"u64\",\n        maxBlockHeight: \"u64\",\n        publicKey: this.PublicKey,\n      },\n    };\n    SignedDelegate = {\n      struct: {\n        delegateAction: this.DelegateAction,\n        signature: this.Signature,\n      },\n    };\n    Action = {\n      enum: [\n        { struct: { createAccount: this.CreateAccount } },\n        { struct: { deployContract: this.DeployContract } },\n        { struct: { functionCall: this.FunctionCall } },\n        { struct: { transfer: this.Transfer } },\n        { struct: { stake: this.Stake } },\n        { struct: { addKey: this.AddKey } },\n        { struct: { deleteKey: this.DeleteKey } },\n        { struct: { deleteAccount: this.DeleteAccount } },\n        { struct: { signedDelegate: this.SignedDelegate } },\n      ],\n    };\n    Transaction = {\n      struct: {\n        signerId: \"string\",\n        publicKey: this.PublicKey,\n        nonce: \"u64\",\n        receiverId: \"string\",\n        blockHash: { array: { type: \"u8\", len: 32 } },\n        actions: { array: { type: this.Action } },\n      },\n    };\n    SignedTransaction = {\n      struct: {\n        transaction: this.Transaction,\n        signature: this.Signature,\n      },\n    };\n  }\n  return new BorshSchema();\n})();\n"],"mappings":"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","names":[]}